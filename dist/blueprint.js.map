{
  "version": 3,
  "sources": ["../src/blueprint.ts"],
  "sourcesContent": [
    "import { XinBlueprint, PartsMap } from 'xinjs'\n\ninterface SwissClockParts extends PartsMap {\n  assembly: SVGGElement\n  face: SVGCircleElement\n  hour: SVGPathElement\n  minute: SVGPolygonElement\n  second: SVGPathElement\n}\n\nexport const swissClock: XinBlueprint = (tag, factory) => {\n  const { Component, svgElements, elements, vars } = factory\n  const { svg, g, circle, polygon, path } = svgElements\n  const { div, xinSlot } = elements\n\n  class SwissClock extends Component {\n    timezone: string | null = null\n    offset = 0\n    time: string | null = null\n    interval: any | null = null\n    updateInterval = 1000\n\n    constructor() {\n      super()\n\n      this.initAttributes('timezone', 'time', 'offset', 'updateInterval')\n    }\n\n    content = () => [\n      svg(\n        {\n          viewBox: '0 0 600 600',\n          version: '1.1',\n          xmlns: 'http://www.w3.org/2000/svg',\n          'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n        },\n        g(\n          {\n            part: 'assembly',\n            stroke: 'none',\n            fill: 'none',\n            fillRule: 'evenodd',\n          },\n          circle({\n            part: 'face',\n            class: 'face',\n            fillRule: 'nonzero',\n            cx: '300',\n            cy: '300',\n            r: '291.54',\n          }),\n          polygon({\n            part: 'hour',\n            class: 'hour',\n            fillRule: 'nonzero',\n            points: '286.17 127.81 312.58 127.81 315.22 362.85 283.53 362.85',\n          }),\n          polygon({\n            part: 'minute',\n            class: 'minute',\n            fillRule: 'nonzero',\n            points: '289.21 46.22 310.34 46.22 312.98 363.12 286.57 363.12',\n          }),\n          path({\n            part: 'second',\n            class: 'second',\n            fillRule: 'nonzero',\n            d: 'M300,102.93 C315.31,102.93 327.72,115.35 327.72,130.66 C327.72,145.08 316.72,156.92 302.66,158.26 L304.48,390.78 L296.56,390.78 L294.73,157.89 C281.93,155.43 272.27,144.17 272.27,130.66 C272.27,115.35 284.68,102.93 300,102.93 Z',\n          }),\n          circle({\n            class: 'pin',\n            fillRule: 'nonzero',\n            cx: 300,\n            cy: 300,\n            r: 3,\n          })\n        )\n      ),\n      div({ class: 'caption' }, xinSlot()),\n    ]\n\n    timezoneOffset(timeNow: Date): number {\n      const offset = this.offset\n      if (!this.timezone) {\n        return offset\n      }\n      const localOffset = this.time ? 0 : timeNow.getTimezoneOffset() / 60\n      return (\n        offset +\n        Number(\n          Intl.DateTimeFormat('en-GB', {\n            hour: 'numeric',\n            minute: 'numeric',\n            timeZoneName: 'shortOffset',\n            timeZone: this.timezone,\n          })\n            .format(timeNow)\n            .split('GMT')\n            .pop()!\n            .replace(/:30/, '.5')\n        ) +\n        localOffset\n      )\n    }\n\n    update() {\n      if (this.time) {\n        this.killInterval\n      } else if (!this.interval) {\n        this.interval = setInterval(\n          this.queueRender.bind(this),\n          this.updateInterval\n        )\n      }\n\n      const { hour, minute, second } = this.parts as SwissClockParts\n      const time = this.time ? new Date(this.time) : new Date()\n      this.ariaLabel = time.toLocaleTimeString()\n      let s = time.getSeconds()\n      const offset = this.timezoneOffset(time)\n      const m = ((time.getMinutes() + 60 * offset) % 60) + s / 60\n      const h = time.getHours() + m / 60 + Math.floor(offset)\n      hour.setAttribute('transform', `rotate(${h * 30}, 300, 300)`)\n      minute.setAttribute('transform', `rotate(${m * 6}, 300, 300)`)\n      if (this.updateInterval > 1000) {\n        second.style.display = 'none'\n      } else {\n        second.style.display = ''\n        const ms =\n          Math.round(time.getMilliseconds() / this.updateInterval) *\n          this.updateInterval\n        s += ms * 0.001\n        second.setAttribute('transform', `rotate(${s * 6}, 300, 300)`)\n      }\n    }\n\n    connectedCallback() {\n      super.connectedCallback()\n      const { assembly, hour } = this.parts\n      for (let minute = 0; minute < 60; minute++) {\n        if (minute % 5 === 0) {\n          assembly.insertBefore(\n            polygon({\n              class: 'hour-tick',\n              fillRule: 'nonzero',\n              transform: `rotate(${minute * 6}, 300, 300)`,\n              points: '289.43 35.91 310.56 35.91 310.56 100.61 289.43 100.61',\n            }),\n            hour\n          )\n        } else {\n          assembly.insertBefore(\n            polygon({\n              class: 'minute-tick',\n              fillRule: 'nonzero',\n              transform: `rotate(${minute * 6}, 300, 300)`,\n              points: '303.91 36.26 296.08 36.26 296.08 58.26 303.91 58.26',\n            }),\n            hour\n          )\n        }\n      }\n\n      this.update()\n    }\n\n    private killInterval() {\n      if (this.interval) {\n        clearInterval(this.interval)\n        this.interval = null\n      }\n    }\n\n    disconnectedCallback(): void {\n      super.disconnectedCallback()\n\n      this.killInterval\n    }\n\n    role = 'time'\n\n    render() {\n      super.render()\n\n      this.update()\n    }\n  }\n\n  return {\n    type: SwissClock,\n    styleSpec: {\n      ':root': {\n        _swissClockFaceStroke: '#D3D3D3',\n        _swissClockFaceStrokeWidth: '16.9',\n        _swissClockFaceFill: '#FFFFFF',\n        _swissClockTickFill: '#404040',\n        _swissClockHourFill: '#202020',\n        _swissClockMinuteFill: '#202020',\n        _swissClockSecondFill: '#D02020',\n        _swissClockPinFill: '#707070',\n        _swissClockSize: '256px',\n      },\n      ':host': {\n        display: 'inline-block',\n        position: 'relative',\n        width: vars.swissClockSize,\n        height: vars.swissClockSize,\n      },\n      ':host .face': {\n        width: '100%',\n        height: '100%',\n        stroke: vars.swissClockFaceStroke,\n        strokeWidth: vars.swissClockFaceStrokeWidth,\n        fill: vars.swissClockFaceFill,\n      },\n      ':host .hour-tick, :host .minute-tick': {\n        fill: vars.swissClockTickFill,\n      },\n      ':host .hour': {\n        fill: vars.swissClockHourFill,\n      },\n      ':host .minute': {\n        fill: vars.swissClockMinuteFill,\n      },\n      ':host .second': {\n        fill: vars.swissClockSecondFill,\n      },\n      ':host .caption': {\n        position: 'absolute',\n        display: 'block',\n        textAlign: 'center',\n        left: 0,\n        right: 0,\n        top: '70%',\n        transform: 'translateY(-50%)',\n      },\n      ':host .pin': {\n        fill: vars.swissClockPinFill,\n      },\n    },\n  }\n}\n\nexport default swissClock\n"
  ],
  "mappings": "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",
  "debugId": "55FE1B9FFC136B0B64756E2164756E21",
  "names": []
}